
import root from '../root.js';
import { set_building, set_prerendering } from '__sveltekit/environment';
import { set_assets } from '__sveltekit/paths';
import { set_manifest, set_read_implementation } from '__sveltekit/server';
import { set_private_env, set_public_env, set_safe_public_env } from '../../../node_modules/@sveltejs/kit/src/runtime/shared-server.js';

export const options = {
	app_dir: "_app",
	app_template_contains_nonce: false,
	csp: {"mode":"auto","directives":{"upgrade-insecure-requests":false,"block-all-mixed-content":false},"reportOnly":{"upgrade-insecure-requests":false,"block-all-mixed-content":false}},
	csrf_check_origin: true,
	embedded: false,
	env_public_prefix: 'PUBLIC_',
	env_private_prefix: '',
	hooks: null, // added lazily, via `get_hooks`
	preload_strategy: "modulepreload",
	root,
	service_worker: false,
	templates: {
		app: ({ head, body, assets, nonce, env }) => "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <link rel=\"icon\" href=\"" + assets + "/favicon.png\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <head>\n      <meta charset=\"utf-8\" />\n      <title>JS Paint</title>\n\n\n      <link rel=\"apple-touch-icon\" href=\"images/icons/apple-icon-180x180.png\" />\n      <!-- Chrome will pick the largest image for some reason, instead of the most appropriate one. -->\n      <!-- <link rel=\"icon\" type=\"image/png\" sizes=\"192x192\" href=\"images/icons/192x192.png\">\n      <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"images/icons/32x32.png\">\n      <link rel=\"icon\" type=\"image/png\" sizes=\"96x96\" href=\"images/icons/96x96.png\"> -->\n      <!-- <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"images/icons/16x16.png\"> -->\n      <link rel=\"shortcut icon\" href=\"favicon.ico\" />\n      <link\n        rel=\"mask-icon\"\n        href=\"images/icons/safari-pinned-tab.svg\"\n        color=\"red\"\n      />\n      <!-- <link rel=\"manifest\" href=\"manifest.webmanifest\" /> -->\n      <meta name=\"msapplication-TileColor\" content=\"#008080\" />\n      <meta\n        name=\"msapplication-TileImage\"\n        content=\"images/icons/ms-icon-144x144.png\"\n      />\n      <meta name=\"theme-color\" content=\"#000080\" />\n\n      <meta name=\"viewport\" content=\"width=device-width\" />\n\n      <meta\n        name=\"description\"\n        content=\"Classic MS Paint in the browser, with extra features\"\n      />\n      <meta property=\"og:image:width\" content=\"279\" />\n      <meta property=\"og:image:height\" content=\"279\" />\n      <meta\n        property=\"og:description\"\n        content=\"Classic MS Paint in the browser, with extra features.\"\n      />\n      <meta property=\"og:title\" content=\"JS Paint\" />\n      <meta property=\"og:url\" content=\"https://jspaint.app\" />\n      <meta\n        property=\"og:image\"\n        content=\"https://jspaint.app/images/icons/og-image-279x279.jpg\"\n      />\n      <meta name=\"twitter:title\" content=\"JS Paint\" />\n      <meta\n        name=\"twitter:description\"\n        content=\"Classic MS Paint in the browser, with extra features\"\n      />\n      <meta\n        name=\"twitter:image\"\n        content=\"https://jspaint.app/images/meta/twitter-card-plz-no-crop.png\"\n      />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:site\" content=\"@isaiahodhner\" />\n      <meta name=\"twitter:creator\" content=\"@isaiahodhner\" />\n\n    </head>\n\n    <style>\n\n      .log-box {\n        width: 100%;\n        height: 33vh;\n        background-color: rgba(0, 0, 0, 0.8);\n        color: #fff;\n        overflow-y: auto;\n        padding: 10px;\n        box-sizing: border-box;\n        font-size: 0.9rem;\n        position: fixed;\n        bottom: 0;\n        left: 0;\n        z-index:9999;\n      }\n\n      .log-message {\n        margin: 5px 0;\n        line-height: 1.4;\n      }\n\n      .error-message {\n        color: #ff4d4d;\n      }\n    </style>\n    \n    " + head + "\n  </head>\n\n  \n  <body data-sveltekit-preload-data=\"hover\" oncontextmenu=\"return false\">\n    <!-- <div class=\"log-box\" id=\"logBox\"></div>\n    <script>\n      // 로그 박스에 메시지를 추가하는 함수\n      function addLogMessage(message, isError = false) {\n        const logBox = document.getElementById(\"logBox\");\n        const logEntry = document.createElement(\"div\");\n        logEntry.className = \"log-message\" + (isError ? \" error-message\" : \"\");\n        logEntry.textContent = message;\n\n        logBox.appendChild(logEntry);\n        logBox.scrollTop = logBox.scrollHeight;\n      }\n\n      // console.log와 console.error 재정의\n      const originalLog = console.log;\n      const originalError = console.error;\n\n      function formatLogArguments(args) {\n        return Array.from(args)\n          .map(arg => (typeof arg === \"object\" ? JSON.stringify(arg) : String(arg)))\n          .join(\" \");\n      }\n\n      console.log = function (...args) {\n        originalLog.apply(console, args);\n        addLogMessage(formatLogArguments(args));\n      };\n\n      console.error = function (...args) {\n        originalError.apply(console, args);\n        addLogMessage(formatLogArguments(args), true);\n      };\n\n      // 테스트 메시지\n      console.log(\"이것은 일반 로그 메시지입니다.\", { key: \"value\" }, 42);\n      console.error(\"이것은 에러 메시지입니다.\", [\"배열\", \"테스트\"], null);\n    </script> -->\n    \n    <script type=\"module\" src=\"lib/jquery-3.4.1.min.js\"></script>\n    <script type=\"module\" src=\"src/app-localization.js\"></script>\n    \n    <div style=\"height:100%\">" + body + "</div>\n  </body>\n</html>\n",
		error: ({ status, message }) => "<!doctype html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>" + message + "</title>\n\n\t\t<style>\n\t\t\tbody {\n\t\t\t\t--bg: white;\n\t\t\t\t--fg: #222;\n\t\t\t\t--divider: #ccc;\n\t\t\t\tbackground: var(--bg);\n\t\t\t\tcolor: var(--fg);\n\t\t\t\tfont-family:\n\t\t\t\t\tsystem-ui,\n\t\t\t\t\t-apple-system,\n\t\t\t\t\tBlinkMacSystemFont,\n\t\t\t\t\t'Segoe UI',\n\t\t\t\t\tRoboto,\n\t\t\t\t\tOxygen,\n\t\t\t\t\tUbuntu,\n\t\t\t\t\tCantarell,\n\t\t\t\t\t'Open Sans',\n\t\t\t\t\t'Helvetica Neue',\n\t\t\t\t\tsans-serif;\n\t\t\t\tdisplay: flex;\n\t\t\t\talign-items: center;\n\t\t\t\tjustify-content: center;\n\t\t\t\theight: 100vh;\n\t\t\t\tmargin: 0;\n\t\t\t}\n\n\t\t\t.error {\n\t\t\t\tdisplay: flex;\n\t\t\t\talign-items: center;\n\t\t\t\tmax-width: 32rem;\n\t\t\t\tmargin: 0 1rem;\n\t\t\t}\n\n\t\t\t.status {\n\t\t\t\tfont-weight: 200;\n\t\t\t\tfont-size: 3rem;\n\t\t\t\tline-height: 1;\n\t\t\t\tposition: relative;\n\t\t\t\ttop: -0.05rem;\n\t\t\t}\n\n\t\t\t.message {\n\t\t\t\tborder-left: 1px solid var(--divider);\n\t\t\t\tpadding: 0 0 0 1rem;\n\t\t\t\tmargin: 0 0 0 1rem;\n\t\t\t\tmin-height: 2.5rem;\n\t\t\t\tdisplay: flex;\n\t\t\t\talign-items: center;\n\t\t\t}\n\n\t\t\t.message h1 {\n\t\t\t\tfont-weight: 400;\n\t\t\t\tfont-size: 1em;\n\t\t\t\tmargin: 0;\n\t\t\t}\n\n\t\t\t@media (prefers-color-scheme: dark) {\n\t\t\t\tbody {\n\t\t\t\t\t--bg: #222;\n\t\t\t\t\t--fg: #ddd;\n\t\t\t\t\t--divider: #666;\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div class=\"error\">\n\t\t\t<span class=\"status\">" + status + "</span>\n\t\t\t<div class=\"message\">\n\t\t\t\t<h1>" + message + "</h1>\n\t\t\t</div>\n\t\t</div>\n\t</body>\n</html>\n"
	},
	version_hash: "1dl51cp"
};

export async function get_hooks() {
	return {
		
		
	};
}

export { set_assets, set_building, set_manifest, set_prerendering, set_private_env, set_public_env, set_read_implementation, set_safe_public_env };
